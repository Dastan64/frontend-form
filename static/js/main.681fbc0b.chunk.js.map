{"version":3,"sources":["components/Select.js","components/Password.js","components/Email.js","components/Checkbox.js","useForm.js","validateLogin.js","getDate.js","components/Form.js","components/Status.js","App.js","reportWebVitals.js","index.js"],"names":["Select","cities","handleChange","values","arr","city","push","population","theBiggestNumber","Math","max","filtered","filter","item","Number","citiesList","sort","cityA","cityB","toLowerCase","map","value","toString","className","htmlFor","name","id","onChange","required","Password","errors","password","type","confirmPassword","Email","email","Checkbox","useForm","validate","firstCity","useState","setValues","setErrors","isSubmitting","setIsSubmitting","useEffect","Object","keys","length","alert","e","target","handleSubmit","preventDefault","console","log","JSON","stringify","validateLogin","includes","getDate","date","Date","getMonth","getFullYear","toLocaleTimeString","Form","action","noValidate","onSubmit","Status","status","setStatus","isVisible","setIsVisible","href","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.681fbc0b.chunk.js","sourcesContent":["import \"../styles/Select.scss\";\r\n\r\nconst Select = ({ cities, handleChange, values }) => {\r\n  let arr = [];\r\n\r\n  for (let city of cities) {\r\n    arr.push(city.population);\r\n  }\r\n  let theBiggestNumber = Math.max(...arr);\r\n  let filtered = cities.filter(\r\n    (item) => Number(item.population) === theBiggestNumber\r\n  );\r\n  const citiesList = cities\r\n    .sort((cityA, cityB) => {\r\n      let cityAName = cityA.city.toLowerCase();\r\n      let cityBName = cityB.city.toLowerCase();\r\n      return cityAName < cityBName ? -1 : 1;\r\n    })\r\n    .filter((city) => city.population > 50000)\r\n    .map((city) => {\r\n      return (\r\n        <option key={city.population.toString()} value={city.city}>\r\n          {city.city}\r\n        </option>\r\n      );\r\n    });\r\n  return (\r\n    <div className=\"form__select-container select\">\r\n      <label htmlFor=\"cities\">Ваш город:</label>\r\n      <select\r\n        className=\"select__field\"\r\n        name=\"city\"\r\n        id=\"cities\"\r\n        onChange={handleChange}\r\n        value={values.city}\r\n        required\r\n      >\r\n        <option\r\n          key={filtered[0].population.toString()}\r\n          value={filtered[0].city}\r\n        >\r\n          {filtered[0].city}\r\n        </option>\r\n        {citiesList}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import \"../styles/Password.scss\";\r\n\r\nconst Password = ({ values, handleChange, errors }) => {\r\n  return (\r\n    <div className=\"form__password-container password\">\r\n      <div className=\"password__initial\">\r\n        <label className=\"password__label\" htmlFor=\"passwordField\">\r\n          Пароль:\r\n        </label>\r\n        <div className=\"password__initial-inner\">\r\n          <input\r\n            className={\r\n              \"password__field \" + (errors.password ? \"input-error\" : \"\")\r\n            }\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"passwordField\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          <p>Ваш новый пароль должен содержать не менее 5 символов.</p>\r\n        </div>\r\n        {errors.password && (\r\n          <p className=\"password__error-caption\">{errors.password}</p>\r\n        )}\r\n      </div>\r\n      <div className=\"password__confirm\">\r\n        <label className=\"password__label\" htmlFor=\"passwordField2\">\r\n          Пароль ещё раз:\r\n        </label>\r\n        <div className=\"password__confirm-inner\">\r\n          <input\r\n            className={\r\n              \"password__field \" + (errors.password ? \"input-error\" : \"\")\r\n            }\r\n            type=\"password\"\r\n            name=\"confirmPassword\"\r\n            id=\"passwordField2\"\r\n            onChange={handleChange}\r\n            value={values.confirmPassword}\r\n            required\r\n          />\r\n          <p>\r\n            Повторите пароль, пожалуйста, это обезопасит вас с нами на случай\r\n            ошибки.\r\n          </p>\r\n        </div>\r\n        {errors.confirmPassword && (\r\n          <p className=\"password__error-caption\">{errors.confirmPassword}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Password;\r\n","import \"../styles/Email.scss\";\r\n\r\nconst Email = ({ values, handleChange, errors }) => {\r\n  return (\r\n    <div className=\"form__email-container email\">\r\n      <label htmlFor=\"emailField\">Электронная почта:</label>\r\n      <div className=\"email__inner\">\r\n        <input\r\n          className={\"email__field \" + (errors.email ? \"input-error\" : \"\")}\r\n          type=\"email\"\r\n          name=\"email\"\r\n          id=\"emailField\"\r\n          required\r\n          value={values.email}\r\n          onChange={handleChange}\r\n        />\r\n        <p>Можно изменить адрес, указанный при регистрации</p>\r\n      </div>\r\n      {errors.email && <p className=\"email__error-caption\">{errors.email}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Email;\r\n","import \"../styles/Checkbox.scss\";\r\n\r\nconst Checkbox = () => {\r\n  return (\r\n    <div className=\"form__checkbox-container checkbox\">\r\n      <input\r\n        className=\"form__checkbox-field\"\r\n        type=\"checkbox\"\r\n        name=\"policyProcess\"\r\n        id=\"checkboxField\"\r\n      />\r\n      <label className=\"checkbox__label\" htmlFor=\"checkboxField\">\r\n        Я согласен принимать актуальную информацию на e-mail\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checkbox;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useForm = (validate, cities) => {\r\n  let arr = [];\r\n\r\n  for (let city of cities) {\r\n    arr.push(city.population);\r\n  }\r\n  let theBiggestNumber = Math.max(...arr);\r\n  let filtered = cities.filter(\r\n    (item) => Number(item.population) === theBiggestNumber\r\n  );\r\n  const firstCity = filtered[0];\r\n  const [values, setValues] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    city: firstCity,\r\n  });\r\n\r\n  const [errors, setErrors] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setErrors(validate(values));\r\n    setIsSubmitting(true);\r\n    console.log(JSON.stringify(values));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && isSubmitting) {\r\n      alert(\"Данные формы были успешно отправлены\");\r\n    }\r\n  }, [errors, isSubmitting]);\r\n  return { values, setValues, handleChange, handleSubmit, errors };\r\n};\r\n\r\nexport default useForm;\r\n","export default function validateLogin(values) {\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Укажите E-mail\";\r\n  } else if (!values.email.includes(\"@\")) {\r\n    errors.email = \"Неверный E-mail\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"Укажите пароль\";\r\n  } else if (values.password.length < 5) {\r\n    errors.password = \"Используйте не менее 5 символов\";\r\n  }\r\n\r\n  if (!values.confirmPassword) {\r\n    errors.confirmPassword = \"Укажите пароль\";\r\n  } else if (values.confirmPassword !== values.password) {\r\n    errors.confirmPassword = \"Пароли не совпадают\";\r\n  }\r\n  return errors;\r\n}\r\n","export default function getDate() {\r\n  const monthNames = [\r\n    \"января\",\r\n    \"февраля\",\r\n    \"марта\",\r\n    \"апреля\",\r\n    \"мая\",\r\n    \"июня\",\r\n    \"июля\",\r\n    \"августа\",\r\n    \"сентября\",\r\n    \"октября\",\r\n    \"ноября\",\r\n    \"декабря\",\r\n  ];\r\n  let date = new Date();\r\n  let msg = `последние изменения ${date.getDate()} ${\r\n    monthNames[date.getMonth()]\r\n  } ${date.getFullYear()} в ${date.toLocaleTimeString()}`;\r\n  return msg;\r\n}\r\n","import \"../styles/Form.scss\";\r\n/* import { useState } from \"react\";\r\n */ import Select from \"./Select\";\r\nimport Password from \"./Password\";\r\nimport Email from \"./Email\";\r\nimport Checkbox from \"./Checkbox\";\r\nimport useForm from \"../useForm\";\r\nimport validate from \"../validateLogin\";\r\nimport getDate from \"../getDate\";\r\n\r\nconst Form = ({ cities }) => {\r\n  const { values, setValues, handleChange, handleSubmit, errors } = useForm(\r\n    validate,\r\n    cities\r\n  );\r\n  return (\r\n    <form className=\"form\" action=\"\" noValidate onSubmit={handleSubmit}>\r\n      <Select cities={cities} handleChange={handleChange} values={values} />\r\n      <hr />\r\n      <Password\r\n        values={values}\r\n        setValues={setValues}\r\n        handleChange={handleChange}\r\n        errors={errors}\r\n      />\r\n      <hr />\r\n      <Email\r\n        values={values}\r\n        setValues={setValues}\r\n        handleChange={handleChange}\r\n        errors={errors}\r\n      />\r\n      <Checkbox />\r\n      <button className=\"form__btn\" type=\"submit\">\r\n        Изменить\r\n      </button>\r\n      <p className=\"form__date-caption\">\r\n        {Object.keys(errors).length === 0 && getDate()}\r\n      </p>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import \"../styles/Status.scss\";\r\nimport { useState } from \"react\";\r\n\r\nconst Status = ({ status, setStatus }) => {\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setStatus(e.target[0].value);\r\n  };\r\n\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"user\">\r\n        <h1 className=\"user__heading heading\">\r\n          <span className=\"heading__span\">Здравствуйте,</span> Человек №3596941\r\n        </h1>\r\n        <button\r\n          href=\"#\"\r\n          className=\"user__status-button\"\r\n          onClick={() => setIsVisible(true)}\r\n        >\r\n          Сменить статус\r\n        </button>\r\n        <div className=\"user__status\">{status}</div>\r\n      </div>\r\n      {isVisible && (\r\n        <form className=\"user__form\" action=\"\" onSubmit={handleSubmit}>\r\n          <label htmlFor=\"user-input\">Введите статус:</label>\r\n          <input\r\n            className=\"user__input\"\r\n            onChange={(e) => setStatus(e.target.value)}\r\n            value={status}\r\n            type=\"text\"\r\n            id=\"user-input\"\r\n          />\r\n          <button className=\"user__btn\" onClick={() => setIsVisible(false)}>\r\n            Сохранить\r\n          </button>\r\n        </form>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Status;\r\n","import Form from \"./components/Form\";\nimport Status from \"./components/Status\";\nimport cities from \"./cities.json\";\n//Styles\nimport \"./styles/GlobalStyle.scss\";\nimport \"./styles/App.scss\";\n//Import useState Hook\nimport { useState } from \"react\";\n\nconst App = () => {\n  const [status, setStatus] = useState(\"Прежде, чем действовать, надо понять\");\n  return (\n    <div className=\"app\">\n      <Status status={status} setStatus={setStatus} />\n      <Form cities={cities} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}